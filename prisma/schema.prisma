// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

model User {
  id          String       @id @default(uuid()) @db.Uuid
  email       String       @unique
  password    String       @default("") // Kosongkan default untuk Google auth
  googleId    String?      @unique // ID unik dari Google
  name        String
  isGoogleAuth Boolean     @default(false) // Flag untuk menandai login via Google
  decks       Deck[] // Decks created by the user
  sharedDecks SharedDeck[] // Decks shared with the user
  progress    Progress[] // User's learning progress
  history     History[] // User's interaction history
  analytics   Analytics[] // User's analytics data
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  Upvote Upvote[]

  Comment Comment[]
}

model Deck {
  id          String       @id @default(uuid()) @db.Uuid
  name        String
  description String? // New description field
  category    String
  isPublic    Boolean      @default(false)
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.Uuid
  flashcards  Flashcard[]
  sharedDecks SharedDeck[]
  history     History[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Upvote Upvote[]
  Comment Comment[]
}

model Flashcard {
  id          String     @id @default(uuid()) @db.Uuid
  question    String
  answer      String
  imageUrl    String? // URL for image-based flashcards
  audioUrl    String? // URL for audio-based flashcards (e.g., for voice interaction)
  aiGenerated Boolean    @default(false) // Flag if flashcard was auto-generated by AI
  tags        String[] // AI-generated tags for categorization (e.g., "Trigonometry", "Vocabulary")
  difficulty  Int        @default(1) // Difficulty level for spaced repetition (1-10)
  deck        Deck       @relation(fields: [deckId], references: [id])
  deckId      String     @db.Uuid
  progress    Progress[]
  history     History[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Progress {
  id          String @id @default(uuid()) @db.Uuid
  userId      String @db.Uuid
  flashcardId String @db.Uuid

  // Spaced Repetition Fields
  easeFactor   Float     @default(2.5)
  interval     Int       @default(1)
  repetitions  Int       @default(0)
  nextReview   DateTime  @default(now())
  lastReviewed DateTime?
  isLearned    Boolean   @default(false)

  // Statistics
  totalReviews   Int @default(0)
  correctReviews Int @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcard Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)

  @@unique([userId, flashcardId])
  @@map("progress")
}

model History {
  id          String    @id @default(uuid()) @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.Uuid
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id])
  flashcardId String    @db.Uuid
  deck        Deck      @relation(fields: [deckId], references: [id])
  deckId      String    @db.Uuid
  userAnswer  String // User's answer (text or voice input)
  isCorrect   Boolean
  status      String // e.g., "MASTERED", "NEEDS_REVIEW"
  createdAt   DateTime  @default(now())
}

model SharedDeck {
  id        String   @id @default(uuid()) @db.Uuid
  deck      Deck     @relation(fields: [deckId], references: [id])
  deckId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  role      String // e.g., "VIEWER", "EDITOR" for collaboration permissions
  createdAt DateTime @default(now())
}

model Analytics {
  id              String   @id @default(uuid()) @db.Uuid
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @db.Uuid
  category        String // e.g., "Trigonometry", "English Vocabulary"
  performance     Float // Percentage of correct answers
  weakAreas       String[] // AI-identified weak topics
  recommendations String[] // AI-generated recommendations (e.g., "Review Trigonometry")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Upvote {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  deck      Deck     @relation(fields: [deckId], references: [id])
  deckId    String   @db.Uuid
  createdAt DateTime @default(now())
  @@unique([userId, deckId]) // Prevent multiple upvotes from the same user on the same deck
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  deck      Deck     @relation(fields: [deckId], references: [id])
  deckId    String   @db.Uuid
  content   String // Comment text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
